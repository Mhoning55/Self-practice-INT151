1. ฟังก์ชัน getFreqOfWords(sentence)
รับประโยคเข้ามาเป็น string
ถ้าค่าเป็น null หรือ undefined จะคืน undefined
แปลงตัวอักษรทั้งหมดเป็นตัวพิมพ์เล็ก
แยกคำออกเป็น array โดยใช้ช่องว่าง (" ") เป็นตัวแบ่ง
วนลูปผ่านแต่ละคำ และนับว่าคำนี้เจอมากี่ครั้ง
คืนค่ากลับเป็น object ที่บอกจำนวนครั้งที่แต่ละคำปรากฏ

2. ฟังก์ชัน getScore(x, y)
รับเลขสองตัวเข้ามา
บวกกันแล้วคืนค่าผลรวมกลับไป

3. Function Declaration & Expression
function declaration คือการประกาศฟังก์ชันแบบปกติที่ใช้ชื่
สามารถเก็บฟังก์ชันไว้ในตัวแปรได้ (function คือค่าประเภทหนึ่ง)
function expression คือการประกาศฟังก์ชันแบบเก็บไว้ในตัวแปร (อาจเป็นแบบลูกศรหรือแบบไม่ตั้งชื่อ)
ถ้าไม่ระบุพารามิเตอร์ใน function expression แล้วพยายามใช้ตัวแปรที่ไม่ได้ส่งเข้ามา จะเกิด error

4. ฟังก์ชัน f1(team, driver)
รับค่าชื่อทีมกับคนขับ
ตรวจสอบว่าทีมเป็น "ferrari" หรือไม่
ถ้าใช่ จะคืนข้อความที่บอกชื่อทีมและคนขับ
แต่มีข้อผิดคือ ใช้เครื่องหมาย = แทน === ซึ่งจะเป็นการกำหนดค่าแทนที่จะตรวจสอบ

5. การส่งฟังก์ชันซ้อนกัน Test(Test2)(10)
Test2 เป็นฟังก์ชันที่รับเลขแล้วบวก 50
Test รับฟังก์ชันอื่นเข้ามาแล้วคืนออกไปโดยไม่ทำอะไร
เมื่อเรียก Test(Test2) จะได้ฟังก์ชัน Test2 กลับมา
แล้วจึงเรียกฟังก์ชันนั้นต่อด้วยเลข 10 ได้ผลลัพธ์เป็น 60

6. ฟังก์ชันที่ใช้ arguments
ฟังก์ชันหนึ่งรับพารามิเตอร์ 3 ตัว
ใช้ตัวแปรพิเศษ arguments เพื่อเข้าถึงค่าทั้งหมดที่ถูกส่งเข้ามา
arguments[0], arguments[1] และ arguments[2] แทนค่าที่ถูกส่งมาในแต่ละตำแหน่ง
แม้ว่าจะไม่กำหนดพารามิเตอร์ไว้ครบในนิยามฟังก์ชัน ก็ยังสามารถเข้าถึงได้ผ่าน arguments

7. ฟังก์ชัน sum() ที่รับพารามิเตอร์ไม่จำกัด
ฟังก์ชันไม่มีการกำหนดพารามิเตอร์ชัดเจน
ใช้ arguments เพื่อวนลูปรวมค่าทั้งหมดเข้าด้วยกัน
ถ้าไม่มีการส่งค่ามาเลย จะได้ผลรวมเป็น 0
ถ้ามีแค่ค่าเดียว ก็คืนค่านั้น

8. ฟังก์ชันที่มี Default Parameters
เป็นฟังก์ชันที่กำหนดค่าตั้งต้นให้กับพารามิเตอร์ไว้ล่วงหน้า
ถ้าผู้ใช้ไม่ได้ส่งค่ามา พารามิเตอร์จะใช้ค่าที่กำหนดไว้
มีข้อผิดพลาดเล็กน้อยในชื่อพารามิเตอร์ (someone พิมพ์ผิด)
เมื่อส่งค่าน้อยกว่าที่ระบุไว้ในฟังก์ชัน ตัวแปรที่ไม่ได้รับค่าจะเป็น undefined ยกเว้นมี default